definitions:
  entities.AllProductsDTO:
    properties:
      products:
        items:
          $ref: '#/definitions/entities.Product'
        type: array
      quantity:
        type: integer
    type: object
  entities.Category:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  entities.City:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  entities.Color:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  entities.Credentials:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  entities.Product:
    properties:
      category:
        $ref: '#/definitions/entities.Category'
      color:
        $ref: '#/definitions/entities.Color'
      id:
        type: string
      imagePaths:
        items:
          type: string
        type: array
      name:
        type: string
      unitPrice:
        type: integer
      unitsInStock:
        type: integer
      user:
        $ref: '#/definitions/entities.User'
    type: object
  entities.ProductDTO:
    properties:
      categoryID:
        type: string
      colorID:
        type: string
      imagePaths:
        items:
          type: string
        type: array
      name:
        type: string
      unitPrice:
        type: integer
      unitsInStock:
        type: integer
      userID:
        type: string
    type: object
  entities.User:
    properties:
      city:
        $ref: '#/definitions/entities.City'
      id:
        type: string
      imagePath:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  entities.UserDTO:
    properties:
      cityID:
        type: string
      imagePath:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /categories:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Category'
            type: array
      tags:
      - категории
  /cities:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.City'
            type: array
      tags:
      - города
  /colors:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Color'
            type: array
      tags:
      - цвета
  /images:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - collectionFormat: multi
        description: изображения
        in: formData
        items:
          type: file
        name: images
        required: true
        type: array
      responses:
        "201":
          description: Created
          schema:
            items:
              type: string
            type: array
      tags:
      - изображения
  /images/{path}:
    get:
      parameters:
      - description: пути к изображению
        in: path
        name: path
        required: true
        type: string
      responses: {}
      tags:
      - изображения
  /meDetails:
    get:
      responses: {}
      tags:
      - пользователи
  /products:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.AllProductsDTO'
      tags:
      - продукты
    post:
      parameters:
      - description: продукт
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/entities.ProductDTO'
      responses: {}
      tags:
      - продукты
  /sign-in:
    post:
      parameters:
      - description: реквизиты для входа
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/entities.Credentials'
      responses: {}
      tags:
      - пользователи
  /sign-up:
    post:
      parameters:
      - description: пользователь
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entities.UserDTO'
      responses: {}
      tags:
      - пользователи
  /users/{id}:
    get:
      parameters:
      - description: идентификатор
        in: path
        name: id
        required: true
        type: string
      responses: {}
      tags:
      - пользователи
swagger: "2.0"
